# -*- coding: utf-8 -*-
"""Pandas Basic Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vF0dQawF4fbJH70mw77OOl-CEwjVplYy
"""

## Ans 1.


import pandas as pd

# Creating a pandas Series with given data
data = [4, 8, 15, 16, 23, 42]

# Creating a Pandas Series object
series = pd.Series(data)

# Printing the Series
print(series)


### Ans 2.

# Creating a list with 10 elements
list_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Converting the list to a pandas Series
series_from_list = pd.Series(list_data)

# Printing the Series
print(series_from_list)



### Ans 3.

# Creating a Pandas DataFrame from a dictionary
data = {
    'Name': ['John', 'Anna', 'Peter', 'Linda'],
    'Age': [28, 24, 35, 32],
    'City': ['New York', 'Paris', 'Berlin', 'London']
}

# Creating the DataFrame
df = pd.DataFrame(data)

# Printing the DataFrame
print(df)



## ANs 4.

# DataFrame: A 2-dimensional, size-mutable, and heterogeneous tabular data structure
# Series: A 1-dimensional labeled array, which can hold different data types.

# Example of Series
series = pd.Series([4, 8, 15, 16, 23, 42])
print("Series:\n", series)

# Example of DataFrame
data = {
    'A': [1, 2, 3],
    'B': [4, 5, 6],
    'C': [7, 8, 9]
}
df = pd.DataFrame(data)
print("\nDataFrame:\n", df)



### Ans 5.

# Some common functions in pandas to manipulate data in a DataFrame:
# df.head() - Returns the first N rows.
# df.tail() - Returns the last N rows.
# df.describe() - Returns descriptive statistics for numeric columns.
# df.sort_values() - Sorts data based on column values.
# df.drop() - Removes rows or columns.
# df.loc[] - Accesses rows and columns by labels.
# df.iloc[] - Accesses rows and columns by index positions.

# Example: Sorting data based on a column
df = pd.DataFrame({
    'A': [10, 20, 30, 40],
    'B': [5, 15, 25, 35],
    'C': [1, 2, 3, 4]
})

# Sorting DataFrame based on column 'B'
sorted_df = df.sort_values(by='B')
print("Sorted DataFrame:\n", sorted_df)



### Ans 6.

# Series and DataFrame are mutable in nature, which means their values can be changed.
# Panel is deprecated and rarely used in modern versions of pandas, but it was mutable too.

# Answer: Series and DataFrame are mutable.



###  Ans 7.

# Creating individual Series
series1 = pd.Series([1, 2, 3], name='A')
series2 = pd.Series([4, 5, 6], name='B')
series3 = pd.Series([7, 8, 9], name='C')

# Concatenating the Series along columns (axis=1)
df_from_series = pd.concat([series1, series2, series3], axis=1)

# Printing the resulting DataFrame
print(df_from_series)

